{"version":3,"file":"static/js/99.3ec9fa8e.chunk.js","mappings":"kSAEaA,EAAaC,EAAAA,QAAAA,GAAH,mEAIVC,EAAaD,EAAAA,QAAAA,GAAH,qEAIVE,EAAeF,EAAAA,QAAAA,GAAH,4CAGZG,EAAaH,EAAAA,QAAAA,EAAH,mFAKVI,EAAQJ,EAAAA,QAAAA,EAAH,6C,SC4BlB,EAtCe,WACb,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,wFACMF,EADN,2CAGyBG,EAAAA,EAAAA,IAAaH,GAHtC,cAGYI,EAHZ,OAIML,EAAUK,EAAKC,SAJrB,kBAKaD,EAAKC,SALlB,gCAOMC,QAAQC,IAAI,KAAMC,SAASJ,MAPjC,0DADc,uBAAC,WAAD,wBAYdK,CAAWT,EACZ,GAAE,CAACA,KAGF,8BACuB,IAAlBF,EAAOY,QACL,SAACnB,EAAD,UACEO,EAAOa,KAAI,SAAAb,GACR,OACI,UAACL,EAAD,YACI,SAACC,EAAD,UAAeI,EAAOc,UACtB,SAACjB,EAAD,UAAaG,EAAOe,aAFPC,EAAAA,EAAAA,IAAO,GAK/B,OAEF,SAAClB,EAAD,uCAKV,C,kMC3CDmB,EAAAA,GAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCACVC,EACQ,sBADRA,EAEO,SAFPA,EAGM,eAHNA,EAIO,WAJPA,EAKO,WAGN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBH,EAAAA,GAAAA,IAAA,WAAcE,EAAd,oBAAyCD,IAD7D,cACGR,EADH,yBAEEA,EAASJ,MAFX,kEAOA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFAEkBL,EAAAA,GAAAA,IAAA,iBACXK,EADW,oBACGJ,EADH,oBAFlB,cAECR,EAFD,yBAKEA,EAASJ,MALX,kEASA,SAAeiB,EAAtB,iDAAO,OAAP,oBAAO,WAAkCC,EAAOC,GAAzC,uFACkBR,EAAAA,GAAAA,IAAA,WACjBE,EADiB,oBACQD,EADR,kBACyBM,EADzB,gCACsDC,EADtD,yBADlB,cACCf,EADD,yBAIEA,EAASJ,MAJX,kEAQA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBJ,GAAzB,uFACkBL,EAAAA,GAAAA,IAAA,WACjBE,GADiB,OACAG,GADA,OACKH,EADL,oBAC+BD,EAD/B,oBADlB,cACCR,EADD,yBAIEA,EAASJ,MAJX,kEASA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAA4BiB,GAA5B,uFACkBL,EAAAA,GAAAA,IAAA,WACjBE,GADiB,OACAG,GADA,OACKH,EADL,oBAC+BD,EAD/B,oBADlB,cACCR,EADD,yBAIEA,EAASJ,MAJX,kE,wDC7CP,IAkBIU,EAAS,WAGX,IAH0B,IAAdW,EAAc,uDAAP,GACfL,EAAK,GACLM,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfL,GADEU,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOV,CACR,C","sources":["components/Review/Review.styled.js","components/Review/Review.jsx","services/fetch.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  list-style: none;\n  padding-left: 0px;\n`;\nexport const ReviewItem = styled.li`\n  text-align: left;\n  margin-bottom: 40px;\n`;\nexport const ReviewAuthor = styled.h2`\n  font-size: 18px;\n`;\nexport const ReviewText = styled.p`\n  background-color: rgb(245, 245, 245);\n  padding: 20px;\n`;\n\nexport const Error = styled.p`\ntext-align: center;\n`;","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchReviews } from '../../services/fetch';\nimport { nanoid } from 'nanoid';\nimport { ReviewList, ReviewItem, ReviewAuthor, ReviewText, Error } from './Review.styled';\n\nconst Review = () => {\n  const [review, setReview] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function addReviews() {\n      if (movieId) {\n        try {\n          const data = await fetchReviews(movieId);\n          setReview(data.results);\n          return data.results;\n        } catch (error) {\n          console.log(error.response.data)\n        }\n      }\n    }\n    addReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n        {review.length !== 0\n        ? (<ReviewList> \n            {review.map(review => {\n                return (\n                    <ReviewItem key={nanoid(3)}>\n                        <ReviewAuthor>{review.author}</ReviewAuthor>\n                        <ReviewText>{review.content}</ReviewText>\n                    </ReviewItem>\n                );\n            })}\n          </ReviewList>)\n        : (<Error>\n            No reviews information.\n          </Error>)}\n    </>\n  );\n};\nexport default Review;","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst api_key = '2402629cc235e448b11efcecffc11c17';\nconst params = {\n    trending: 'trending/movie/week',\n    movieID: 'movie/',\n    search: 'search/movie',\n    credits: '/credits',\n    reviews: '/reviews'\n}\n\nexport async function fetchTrending() {\n    const response = await axios.get(`/${params.trending}?api_key=${api_key}`);\n  return response.data;\n  };\n\n\n\nexport async function fetchMovieByID(id) {\n\n  const response = await axios.get(\n    `/movie/${id}?api_key=${api_key}&language=en-US`\n  );\n  return response.data;\n}\n\n\nexport async function fetchMoviesByQuery(query, page) {\n  const response = await axios.get(\n    `/${params.search}?api_key=${api_key}&query=${query}&language=en-US&page=${page}&include_adult=false`\n  );\n  return response.data;\n}\n\n\nexport async function fetchCast(id) {\n  const response = await axios.get(\n    `/${params.movieID}${id}${params.credits}?api_key=${api_key}&language=en-US`\n  );\n  return response.data;\n}\n\n\n\nexport async function fetchReviews(id) {\n  const response = await axios.get(\n    `/${params.movieID}${id}${params.reviews}?api_key=${api_key}&language=en-US`\n  );\n  return response.data;\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["ReviewList","styled","ReviewItem","ReviewAuthor","ReviewText","Error","useState","review","setReview","movieId","useParams","useEffect","fetchReviews","data","results","console","log","response","addReviews","length","map","author","content","nanoid","axios","api_key","params","fetchTrending","fetchMovieByID","id","fetchMoviesByQuery","query","page","fetchCast","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}