{"version":3,"file":"static/js/387.dce0b832.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/fetch.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n padding: 0px;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin-top: 20px;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const ImgWrapper = styled.div`\n  /* max-width: 200px; */\n  /* width: 100%; */\n  /* max-height: 300px; */\n  /* margin: 0 auto; */\n`;\nexport const CastImg = styled.img`\n  object-fit: cover;\n  width: 100%;\n  /* max-width: 200px; */\n  height: auto;\n`;\nexport const CastInfo = styled.p`\n  font-weight: 500;\n  margin-bottom: 8px;\n  margin-top: 8px;\n\n`;\nexport const CastName = styled.span`\n  font-weight: 500;\n`;\n\nexport const Error = styled.p`\n    text-align: center;\n`;\n","import { nanoid } from 'nanoid';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport anyActor from './anyActor.jpg';\nimport { fetchCast } from '../../services/fetch';\nimport { Container, CastList, ImgWrapper, CastImg, CastInfo, CastName, Error} from './Cast.styled';\n\nfunction Cast() {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function addCast() {\n      if (movieId) {\n        try {\n          const data = await fetchCast(movieId);\n            setCast(data.cast);\n            console.log(data.cast);\n          return data.cast;\n        } catch (error) {\n          console.log(error.response.data);\n        }\n      }\n    }\n    addCast(movieId);\n  }, [movieId]);\n\n  return (\n    <Container>\n      {cast.length !== 0 ? (\n        <CastList>\n          {cast.map(actor => {\n            const actorPhoto = actor.profile_path\n              ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n              : anyActor;\n            return (\n              <li key={nanoid(3)}>\n                <ImgWrapper>\n                  <CastImg src={actorPhoto} alt={actor.name} />\n                </ImgWrapper>\n                <CastInfo>\n                 <CastName>{actor.name}</CastName>\n                </CastInfo>\n                <CastInfo>\n                  as {}\n                  <CastName>{actor.character}</CastName>\n                </CastInfo>\n              </li>\n            );\n          })}\n        </CastList>\n      ) :   <Error>\n        No casting information\n          </Error>}\n     \n    \n    </Container>\n  );\n};\nexport default Cast;","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst api_key = '2402629cc235e448b11efcecffc11c17';\nconst params = {\n    trending: 'trending/movie/week',\n    movieID: 'movie/',\n    search: 'search/movie',\n    credits: '/credits',\n    reviews: '/reviews'\n}\n\nexport async function fetchTrending() {\n    const response = await axios.get(`/${params.trending}?api_key=${api_key}`);\n  return response.data;\n  };\n\n  \n   \nexport async function fetchMovieByID(id) {\n\n  const response = await axios.get(\n    `/movie/${id}?api_key=${api_key}&language=en-US`\n  );\n  return response.data;\n}\n\n\nexport async function fetchMoviesByQuery(query, page) {\n  const response = await axios.get(\n    `/${params.search}?api_key=${api_key}&query=${query}&language=en-US&page=${page}&include_adult=false`\n  );\n  return response.data;\n}\n\n\nexport async function fetchCast(id) {\n  const response = await axios.get(\n    `/${params.movieID}${id}${params.credits}?api_key=${api_key}&language=en-US`\n  );\n\n  return response.data;\n}\n\nexport async function fetchReviews(id) {\n  const response = await axios.get(\n    `/${params.movieID}${id}${params.reviews}?api_key=${api_key}&language=en-US`\n  );\n\n  return response.data;\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Container","styled","CastList","ImgWrapper","CastImg","CastInfo","CastName","Error","useState","cast","setCast","movieId","useParams","useEffect","fetchCast","data","console","log","response","addCast","length","map","actor","actorPhoto","profile_path","anyActor","src","alt","name","character","nanoid","axios","api_key","params","fetchTrending","fetchMovieByID","id","fetchMoviesByQuery","query","page","fetchReviews","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}